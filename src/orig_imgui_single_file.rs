use std::collections::HashSet;
use std::io::SeekFrom::end;
use std::io::stdout;
use std::mem::size_of;
use crate::axis::Axis;
use crate::border::{get_resize_border_rect, ResizeBorderDef};
use crate::color::{IM_COL32_A_MASK, IM_COL32_A_SHIFT, IM_COL32_BLACK, IM_COL32_WHITE, make_color_32, StyleColor};
use crate::condition::Condition;
use crate::config::{ConfigFlags, IMGUI_DEBUG_INI_SETINGS};
use crate::context::{call_context_hooks, Context, ContextHook, ContextHookType};
use crate::data_authority::DataAuthority::Window;
use crate::direction::Direction;
use crate::dock::DOCKING_TRANSPARENT_PAYLOAD_ALPHA;
use crate::dock_context::dock_context_shutdown;
use crate::dock_node::{dock_node_get_root_node, DockNode};
use crate::drag_drop::DragDropFlags;
use crate::draw_data::DrawData;
use crate::draw_defines::DrawFlags;
use crate::draw_list::{add_draw_list_to_draw_data, DrawList, DrawListFlags, get_background_draw_list, get_foreground_draw_list, get_viewport_draw_list};
use crate::font_atlas::FontAtlas;
use crate::frame::end_frame;
use crate::types::{Id32, INVALID_ID};
use crate::globals::GImGui;
use crate::hash::hash_string;
use crate::id::set_active_id;
use crate::input::{InputSource, ModFlags, MouseButton, MouseCursor, NavLayer, WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER};
use crate::item::{is_item_deactivated, is_item_hovered, ItemFlags, ItemStatusFlags};
use crate::math::{floor_vector_2d, im_f32_to_int8_sat, swap_f32};
use crate::mouse::{start_lock_wheeling_window, start_mouse_moving_window, start_mouse_moving_window_or_node};
use crate::nav::NAV_RESIZE_SPEED;
use crate::rect::Rect;
use crate::render::{find_rendered_text_end, render_dimmed_background_behind_window, render_dimmed_backgrounds};
use crate::resize::{RESIZE_GRIP_DEF, ResizeGripDef};
use crate::settings::SettingsHandler;
use crate::size_callback_data::SizeCallbackData;
use crate::style::{get_color_u32, get_color_u32_no_alpha, pop_style_color, push_style_color};
use crate::utils::{add_hash_set, remove_hash_set_val, set_hash_set, sub_hash_set};
use crate::vectors::ImLengthSqr;
use crate::vectors::two_d::Vector2D;
use crate::viewport::{setup_viewport_draw_data, Viewport, ViewportFlags};
use crate::window::{add_root_window_to_draw_data, add_window_to_draw_data, add_window_to_sort_buffer, calc_window_content_sizes, calc_window_size_after_constraint, find_bottom_most_visible_window_with_begin_stack, find_front_most_visible_child_window, get_window_display_layer, get_window_for_title_and_menu_height, HoveredFlags, is_window_active_and_visible, is_window_content_hoverable, set_window_condition_allow_flags, update_window_focus_order_list, Window, WindowFlags, WINDOWS_HOVER_PADDING, WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER};
use crate::window::color::get_window_bg_color_idx;
use crate::window::next::NextWindowDataFlags;
use crate::window::settings::{apply_window_settings, WindowSettings};
use crate::window::size::{calc_resize_pos_size_from_any_corner, calc_window_auto_fit_size}; 
